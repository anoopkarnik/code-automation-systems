model Workflow {
  id                String   @id @default(uuid())
  name              String
  description       String
  publish           Boolean? @default(false)
  shared            Boolean? @default(false)
  template          Boolean? @default(false)
  lastRun           String?
  userId            String
  events            Event[]
  trigger           WorkflowTrigger?
  actions           WorkflowAction[]
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@schema("workflow_schema")
}

model WorkflowTrigger {
  id                String   @id @default(uuid())
  workflowId        String   @unique
  triggerId         String
  metadata          Json?    @default("{}")
  workflow          Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type              WorkflowTriggerSubType @relation(fields: [triggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  @@schema("workflow_schema")
}

model WorkflowAction {
  id                String   @id @default(uuid())
  workflowId        String
  actionId          String
  metadata          Json?    @default("{}")  @db.JsonB
  sortingOrder      Int      @default(0)

  workflow          Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type              WorkflowActionSubType  @relation(fields: [actionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@schema("workflow_schema")
}

model WorkflowTriggerType {
  id                String   @id @default(uuid())
  name              String
  description       String?
  icon              String?
  types             WorkflowTriggerSubType[]
  @@schema("workflow_schema")
}

model WorkflowTriggerSubType {
  id                String   @id @default(uuid())
  name              String
  typeId            String
  triggerType       WorkflowTriggerType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  triggers          WorkflowTrigger[] 
  @@schema("workflow_schema")
}

model WorkflowActionType {
  id                String   @id @default(uuid())
  name              String
  description       String?
  icon              String?
  types             WorkflowActionSubType[]
  @@schema("workflow_schema")
}

model WorkflowActionSubType {
  id                String   @id @default(uuid())
  name              String
  typeId            String
  serverType        String @default("nodejs")
  actionType        WorkflowActionType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  actions           WorkflowAction[]
  @@schema("workflow_schema")
}

model Event {
  id               String   @id @default(uuid())
  workflowId       String
  Workflows        Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status           String
  metadata         Json?
  eventOutbox      EventOutbox?
  serverType       String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("workflow_schema")
}

model EventOutbox {
  id                String   @id @default(uuid())
  eventId           String @unique
  serverType        String?
  event             Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  @@schema("workflow_schema")
}
